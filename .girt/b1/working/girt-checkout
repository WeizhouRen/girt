#!/bin/dash

# test .girt exists
if ! test -d .girt
then
	echo "$0: error: girt repository directory .girt not found"
	exit 1
fi

# check if first commit exists
if ! test -d ".girt/master/commit_0"
then
	echo "girt-branch: error: this command can not be run until after the first commit"
	exit 1
fi

# get current branch
branch=$( cat .girt/branch )

# test input
if test $# -ne 1 || echo $1 | grep -E -q '^-'
then
    echo "usage: girt-checkout <branch>"
    exit 1
fi

# target branch does not exist
if ! test -d ".girt/${1}"
then
    echo "girt-checkout: error: unknown branch '${1}'"
    exit 1
fi

# current branch and target branch are same
if test "$1" = "$branch"
then 
    echo "Already on '${1}'"
    exit 0
fi

###### do comparisons before checkout ######

cur_repo=".girt/${branch}/repository"
dest_repo=".girt/${1}/repository"
cur_idx=".girt/${branch}/index"
dest_idx=".girt/${1}/index"
cur_wrk=".girt/${branch}/working"
dest_wrk=".girt/${1}/working"

cmp_repo=$(diff -r $cur_repo $dest_repo)

if test "$cmp_repo" = "" 
then
    # CASE I:   repositories are same, changes in current branch
    #           will work in target branch as well
    for file in *
    do
        # update file in current working directory inside branch directory
        cp -R $file "${dest_wrk}/${file}"
        # update file in target branch working directory
        cp -R $file "${cur_wrk}/${file}"

        # if file has been staged, should be staged in target branch as well
        if cmp -s $file "${cur_idx}/${file}"
        then
            cp -R $file "${dest_idx}/${file}"
        fi
    done

else
# repositories are different
    overwritten="false"
    echo "girt-checkout: error: Your changes to the following files would be overwritten by checkout:" > overwritten_files

    for cur_cmt_file in $cur_repo/*
    do
        filename=$(echo $cur_cmt_file |cut -d'/' -f4)
        dest_cmt_file="${dest_repo}/${filename}"
        dest_wrk_file="${dest_wrk}/${filename}"
        dest_stg_file="${dest_idx}/${filename}"
        cur_stg_file="${curt_idx}/${filename}"
        cur_wrk_file="${cur_wrk}/${filename}"
        # CASE II:  file has been committed in different branches, 
        #           changed and staged in current branch, but have not committed yet
        #           raise error for overwritten
      
        if ! cmp -s $cur_cmt_file $dest_cmt_file && cmp -s $filename $cur_stg_file && ! cmp -s $filename $cur_cmt_file
        then
            overwritten="true"
            echo $filename >> overwritten_files
        fi

    done

    if test $overwritten = "true"
    then
        cat $overwritten_files
        rm overwritten_files
        exit 1
    fi
    rm overwritten_files



    # No file will be overwritten, can do checkout successfully
    for cur_cmt_file in $cur_repo/*
    do
        filename=$(echo $cur_cmt_file |cut -d'/' -f4)
        dest_cmt_file="${dest_repo}/${filename}"
        dest_wrk_file="${dest_wrk}/${filename}"
        dest_stg_file="${dest_idx}/${filename}"
        cur_stg_file="${curt_idx}/${filename}"
        cur_wrk_file="${cur_wrk}/${filename}"
        # CASE III: file not exists in repository of target branch
        #           target branch will not load this file
        if ! test -f $dest_cmt_file
        then 
            # echo "current commit file not exist int target branch repo is ${cur_cmt_file}"
            rm -f $dest_wrk_file $dest_stg_file
            continue
        fi

        # CASE IV:  file has been committed in different branches, 
        #           changed in current branch but haven't commit yet, 
        #           file in target branch will rollback to last commit version
        #           if file staged in current branch, also need to update file in index in target  
        if ! cmp -s $cur_cmt_file $dest_cmt_file && cmp -s $filename $cur_cmt_file
        then
            cp -R $dest_cmt_file $dest_wrk_file
	        cp -R $dest_cmt_file $dest_stg_file
        fi
    done

fi


# load file from inside working directory to outside
for file in *
do
    cp -R $file "${cur_wrk}/${file}"
    rm -rf $file
done
for file in ${dest_wrk}/*
do
    cp -R $file .
done
# update branch
echo "$1" > .girt/branch
echo "Switched to branch '$1'"
